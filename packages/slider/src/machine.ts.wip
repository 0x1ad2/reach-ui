import { assign, MachineEventWithRefs, StateMachine } from "@reach/machine";

////////////////////////////////////////////////////////////////////////////////
// States

export enum SliderStates {
  // Resting state.
  Idle = "IDLE",

  // The user is interacting with the slider
  Active = "NAVIGATING",
}

////////////////////////////////////////////////////////////////////////////////
// Events

export enum SliderEvents {
  GetDerivedData = "GET_DERIVED_DATA",
  PointerDown = "POINTER_DOWN",
  PointerMove = "POINTER_MOVE",
  PointerUp = "POINTER_UP",
  KeyDownSetValue = "KEY_DOWN_SET_VALUE",

  // Uncontrolled value changes come from specific events (click, key, etc.)
  // ValueChange > Value change may have come from somewhere else
  ValueChange = "VALUE_CHANGE",
}

////////////////////////////////////////////////////////////////////////////////
// Actions and conditions

let assignValue = assign<SliderStateData, any>({
  value: (_: any, event: any) => event.value,
});

function focusHandle(data: SliderStateData, event: any) {
  event.refs.handle?.focus();
}

function sliderIsNotDisabled(data: SliderStateData, event: any) {
  return !event.disabled;
}

let commonEvents = {
  [SliderEvents.GetDerivedData]: {
    actions: assign<SliderStateData, any>((ctx, event) => {
      return {
        ...ctx,
        ...event.data,
        refs: {
          ...ctx.refs,
          ...(event.data.refs || {}),
        },
      };
    }),
  },
  [SliderEvents.ValueChange]: {
    actions: [assignValue],
  },
};

////////////////////////////////////////////////////////////////////////////////

/**
 * Initializer for our state machine.
 *
 * @param initial
 * @param props
 */
export const createMachineDefinition = ({
  value,
}: {
  value: number | null;
}): StateMachine.Config<SliderStateData, SliderEvent> => ({
  id: "slider",
  initial: SliderStates.Idle,
  context: {
    value,
    refs: {
      handle: null,
      input: null,
      track: null,
      hiddenInput: null,
    },
  },
  states: {
    [SliderStates.Idle]: {
      on: {
        ...commonEvents,
        [SliderEvents.PointerDown]: {
          target: SliderStates.Active,
          actions: [focusHandle, assignValue],
          cond: sliderIsNotDisabled,
        },
      },
    },
    [SliderStates.Active]: {
      on: {
        ...commonEvents,
        [SliderEvents.PointerMove]: {
          target: SliderStates.Active,
          actions: [assignValue],
        },
      },
    },
  },
});

////////////////////////////////////////////////////////////////////////////////
// Utils

////////////////////////////////////////////////////////////////////////////////
// Types

/**
 * Shared partial interface for all of our event objects.
 */
export interface SliderEventBase extends MachineEventWithRefs {
  refs: ListboxNodeRefs;
}

/**
 * DOM nodes for all of the refs used in the listbox state machine.
 */
export type ListboxNodeRefs = {
  handle: HTMLElement | null;
  hiddenInput: HTMLInputElement | null;
  input: HTMLElement | null;
  track: HTMLElement | null;
};

/**
 * Event object for the slider state machine.
 */
export type SliderEvent = SliderEventBase &
  (
    | {
        type: SliderEvents.GetDerivedData;
        data: Omit<Partial<SliderStateData>, "refs"> & {
          refs?: Partial<SliderStateData["refs"]>;
        };
      }
    | {
        type: SliderEvents.PointerDown;
        disabled: boolean;
      }
    | {
        type: SliderEvents.PointerUp;
      }
    | {
        type: SliderEvents.PointerMove;
        disabled: boolean;
      }
    | {
        type: SliderEvents.KeyDownSetValue;
        value: number;
        disabled: boolean;
      }
    | {
        type: SliderEvents.ValueChange;
        value: number;
        callback?: ((newValue: number) => void) | null | undefined;
      }
  );

/**
 * State object for the slider state machine.
 */
export type SliderState = {
  value: SliderStates;
  context: SliderStateData;
};

export type SliderStateData = {
  refs: ListboxNodeRefs;
  value: number | null;
};
